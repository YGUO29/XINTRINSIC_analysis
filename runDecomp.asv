function [Decomp] = runDecomp(X, opt, para)
% opt.fluo = 0; 
% opt.method = 'mICA'; % or 'NMF'
% opt.nRows = 1;
% opt.plotON = 1;
% Ks = 6; % component numbers, could be a vector
% [Rs, Ws, comps, recon_error, X_hat] = runDecomp(X, Ks, opt, para);

% initialization 
Decomp = struct('Rs', [], 'Ws', [], 'comp', [], 'recon_error', [], 'X_hat',[]);
nK = length(opt.Ks);
Rs = cell(1, nK);
Ws = Rs;
comp = Rs;
X_hat = cell(1, nK);
recon_error = zeros(1, nK);

% reverse X if it's intrinsic (although this doesn't seem to change the
% results for mICA)
if ~opt.fluo 
    X = -X;
    if isfield(opt, 'X_test'); opt.X_test = -opt.X_test; end
else
end
%% For PCA
if strcmp(opt.method, 'PCA')
    k = 1; % store Rs and Ws in only one cell
    % de-mean of X!!!!!!!!!!!!!!!!!!
    % demean rows of the data matrix
    X_zero_mean_rows = nan(size(X));
    for i = 1:size(X,1)
        X_zero_mean_rows(i,:) = X(i,:) - mean(X(i,:));
    end

    [U, S, V] = svd(X_zero_mean_rows, 'econ');
    Rs{k} = U(:, 1:opt.Ks)';
    Ws{k} = V(:, 1:opt.Ks)';
    
    % orient so that average weights (across all components) are positive
    Rs{k} = Rs{k} .* repmat(sign(mean(Ws{k},2)), 1, size(X,1));
    Ws{k} = Ws{k} .* repmat(sign(mean(Ws{k},2)), 1, size(X,2));
    
    recon_error = diag(S)./sum(diag(S));
    if opt.plotON
        % for plot components.
        figurex([1323, 380, 1365, 192]); 
        ha = tight_subplot(opt.nRows, ceil(opt.Ks./opt.nRows), [.01 .01],[.1 .01],[.01 .01]);

        % plot components
        for i = 1:opt.Ks
%             cutoff = 0.02;
            cutoff = mean(Ws{k}(i,:)) + 7*std(Ws{k}(i,:)); % variable cutoff values for each components
            comp_temp = zeros(para.height, para.width);
            if isfield(para, )
            comp_temp(para.ind_save) = Ws{k}(i,:);
            % ============= plot components only =============
            %     mask_temp = double(~mask_outline_reg);
            %     mask_temp(mask_temp == 0) = -inf;
            axes(ha(i)); 
            if para.mirror
                comp_temp = fliplr(comp_temp);
            else
            end
            imagesc(comp_temp,cutoff.*[-1 1]),axis image, colormap(jet)
            comp{k}(:, :, i) = comp_temp;
            drawnow;
            colorbar;
            axis off
            if isfield(para,'ct')
                plotContour(para.ct, 'gray')
            end
        end
    end
else

%% for mICA and NMF    
for k = 1:nK
    K = opt.Ks(k); % k: the index; K: the #components   
    switch opt.method 
        case 'mICA' % modified ICA (Sam, 2015)
            addpath('D:\SynologyDrive\=code=\McdermottLab\toolbox_nonparametric-ICA') % MAKE SURE
            % THIS FOLDER IS ON THE TOP OF THE PATH LIST IN MATLAB!!!!
            RANDOM_INITS = 10;      
            PLOT_FIGURES = 0;
            % ========= reverse the sign for X for intrinsic imaging ========
            tic,[Rs{k}, Ws{k}] = nonparametric_ica(X, K, RANDOM_INITS, PLOT_FIGURES);toc
            
            % adjust order of W by absolute values
            [~, ind] = sort( mean(abs(Ws{k}), 2), 'descend');
            Ws{k} = Ws{k}(ind, :);
            Rs{k} = Rs{k}(:, ind);
            if isfield(opt, 'X_test')
                X_test = opt.X_test;
            else
                X_test = X;
            end
            X_hat{k} = (Rs{k} / (Rs{k}' * Rs{k}))* Rs{k}' * X_test;
            recon_error(k) = norm(X_test - X_hat{k}, 'fro');
        case 'NMF'
            X_pos = X - min(X(:));
            options = statset('Maxiter',200);
            [Rs{k}, Ws{k}] = nnmf(X_pos, K, 'options', options);
%             X_hat{k} = R{k} * W{k};
            if isfield(opt, 'X_test')
                X_test = opt.X_test - min(opt.X_test(:));
            else
                X_test = X_pos;
            end
            X_hat{k} = (Rs{k} / (Rs{k}' * Rs{k}))* Rs{k}' * X_test;
            recon_error(k) = norm(X_test - X_hat{k}, 'fro');
    end
    
    if opt.plotON
        % for plot components.
        figurex; 
        set(gcf,'color','w','position', [1323, 380, 1365, 192]);
        ha = tight_subplot(opt.nRows, ceil(K./opt.nRows), [.01 .01],[.1 .01],[.01 .01]);

        % arrange components' order
        ind = 1:K;
        % % ind = [3 2 4 6 5 1]; % for 80Z
        % ind = [1 2 5 4 3 6]; % for 132D 1/19 session
        % ind = [1 2 4 6 5 3]; % for 132D, session 2

        % plot components
        for i = 1:K
%             cutoff = 0.15;
            cutoff = mean(Ws{k}(ind(i),:)) + 7*std(Ws{k}(ind(i),:)); % variable cutoff values for each components
            comp_temp = zeros(para.height, para.width);
            comp_temp(para.ind_save) = Ws{k}(ind(i),:);
            % ============= plot components only =============
            %     mask_temp = double(~mask_outline_reg);
            %     mask_temp(mask_temp == 0) = -inf;
            
            axes(ha(i)); 
%             axes(ha(i+(k-1)*max(opt.Ks)));
            imagesc(comp_temp,cutoff.*[-1 1]),axis image, colormap(jet)
            comp{k}(:, :, i) = comp_temp;
            drawnow;
            colorbar;
            axis off
            if para.mirror
                set(gca,'XDir','reverse');
            else
            end
            
            if isfield(para,'ct')
                plotContour(para.ct, 'gray')
            end
        end
    end
end
end

% plot reconstruction error
if opt.plotON
    figurex;
    plot(opt.Ks, recon_error,'marker','*')
    xlabel('# components')
    ylabel('reconstruction error')
end

Decomp.Rs = Rs;
Decomp.Ws = Ws;
Decomp.comp = comp;
Decomp.recon_error = recon_error;
Decomp.X_hat = X_hat;

end