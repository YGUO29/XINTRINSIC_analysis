% compare two conditions - get differential maps and statistics
%% compare component response to orig vs. synth sounds
figurex;
iK = 3;
K = opt_decomp.Ks(iK);
for k = 1:K
    subplot(1,K,k)
    R1 = Decomp_102D.Rs{iK}(2:2:end,k);
    R2 = Decomp_102D.Rs{iK}(1:2:end,k);
    scatter(R1(1:108),R2(37:end), 'MarkerFaceColor',[0.5 0.5 0.5],  'MarkerEdgeColor',[0.5 0.5 0.5]), hold on
    scatter(R1(1:36),R2(1:36), 'MarkerFaceColor','r', 'MarkerEdgeColor','r'), hold on

    plot([-3 2], [-3 2], 'color', [0.5 0.5 0.5],'linestyle','--')
    xlabel('original sound')
    ylabel('model-matched sound')
%     legend({'other natural sounds', 'vocalizations'})
    axis square
    xlim([min(R1), max(R1)])
    ylim([min(R2), max(R2)])
end
%% subtraction - compare two sets of trials
% X1 = X(1:size(X,1)/2, :); X2 = X(size(X,1)/2+1:end, :);
X1 = X(1:2:end,:); % original
X2 = X(2:2:end,:); % synth

figurex;
% for i = 1:4
%     subplot(2,2,i)
%     eval(['temp = mean(X',num2str(i),', 1);']);
    img = mean(X1 - X2, 1); % X1: Original, X2: modified
    Max = max(abs(img));
    imagesc(reshape(img, para.height, para.width), [-Max, Max].*0.8), 
    axis image, axis off, colorbar
%     colormap(jet)
    colormap(flipud(cbrewer('div', 'RdBu', 256)))
    title('Original - Model Matched (full)')

% end

%% calculate NSE - same measurement used in Norman-Haignere 2018
% this is done without noise correction 
% check the original paper for noise correction methods

% normalized square error
X1 = X_sep(:,31:2:end,:); % original
X2 = X_sep(:,32:2:end,:); % synth

X11 = squeeze(mean(X1(1:2:end,:,:)));
X12 = squeeze(mean(X1(2:2:end,:,:)));
X1 = cat(3, X11, X12);
X21 = squeeze(mean(X2(1:2:end,:,:)));
X22 = squeeze(mean(X2(2:2:end,:,:)));
X2 = cat(3, X21, X22);

[nse_map, noise_map_x, noise_map_y] = getNSE(X1, X2, 1);

figurex([1440         918         733         420]);
img = nse_map;
Max = max(abs(img));
% imagesc(reshape(img, para.height, para.width), [0, Max].*0.99), 
imagesc(reshape(img, para.height, para.width), [0, 1]), 
axis image, axis off, colorbar
    colormap(jet)
% colormap(flipud(cbrewer('div', 'RdBu', 256)))
title('similarity between original and synth sounds (NSE)')
set(gca,'XDir','reverse');

%%
Titles = {'Phee', 'Trillphee', 'Trill', 'Twitter'};
figurex;
indices = nchoosek(1:4,2);

for i = 1:6
    ind = indices(i,:);
    subplot(2,3,i)  
    img = X_temp{ind(1)} - X_temp{ind(2)};
%     img = X((i-1)*36+[1:36],:);
%     X_temp{i} = mean(img,1);
%     eval(['temp = mean(X',num2str(i),', 1);']);
%     img = mean(X1 - X2, 1); % X1: Original, X2: modified
    Max = max(abs(img));
%     Max = 0.08;
    imagesc(reshape(img, para.height, para.width), [-Max, Max].*0.9), 
    axis image, colorbar
    colormap(jet)
    title([Titles{ind(1)}, ' - ', Titles{ind(2)}])
%     colormap(cbrewer('div', 'RdBu', 256))
end
%% group comparison: get statistics
[~,p,~,stats] = ttest2(X1, X2);

% combine t-value and p-value
cmap = flipud(cbrewer('div', 'RdBu', 256));

figurex;
img = cell(1, 3);

% figure1: t-value only
img{1} = reshape(stats.tstat, para.height, para.width);

% figure2: p-value only
img_amp = -log10(p);
img{2} = reshape(img_amp, para.height, para.width);

% figure3: t-value and p-value together
cmap_ind = rescale(stats.tstat, 1, 256);
cmap_ind(ismissing(cmap_ind)) = 256/2;
img_rgb = cmap(floor(cmap_ind),:); % RGB values
img_amp(ismissing(img_amp)) = 0;
img_amp = rescale(img_amp);

img{3} = img_rgb.*repmat(img_amp', 1, 3);
img{3} = reshape(img{3}, para.height, para.width, 3);

Titles = {'t-values', '-log10(p-value)', 't-values with p-values as amplitude mask'};
for i = 1:3
    subplot(1,3,i)
    Max = max(abs(img{i}(:)));
    imagesc(img{i}, [-Max, Max].*0.8), 
    axis image, colorbar
    colormap(cmap)
    title(Titles{i})
end
